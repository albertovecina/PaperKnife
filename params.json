{"name":"Paper Knife","tagline":"Decoupler tool for Android Adapters","body":"#Paper Knife\r\n**Decoupler tool for Android Adapters**\r\n\r\n##How to use\r\n\r\n1. Make your model object to implements CellElement interface\r\n\r\n\t\tpublic class Item implements CellElement {\r\n\t\t}\r\n \r\n2. Implements a class to handle the row views (a view holder) and implements the CellViewHolder interface\r\n\r\n\t\tprivate static class ViewHolder implements CellViewHolder {\r\n\t\t} \r\n\r\n3. Implements methods in your CellViewHolder to manage the views, and mark them as data targets with the annotation DataTarget and providing an id\r\n\r\n\t\t@DataTarget(\"Title\")\r\n\t\tpublic void setTitle(String title) {\r\n           mTextViewTitle.setText(title);\r\n        }\r\n        \r\n\t\t\r\n4. Implements a cell provider. The cell provider the information source to populate de DataTarget methods. Implements the CellDataProvider interface and annotate your source methods sharing the DataTarget id to make the data mapping. The cell provider methods receives an instance of your model as a paramenter.\r\n\r\n\t\tpublic class SamplePresenterImpl implements SamplePresenter, CellDataProvider {\r\n\t\t\r\n\t\t\t...\r\n\t\t    @DataSource(\"Title\")\r\n\t\t    public String getTitle(Item item) {\r\n\t\t        return item.getTitle();\r\n\t\t    }\r\n\t\t  \t...\r\n\t\t  \t\r\n\t\t}\r\n    \t\r\n5. [OPTIONAL] Implementes a listener provider. The listener provider is a class resposible to create listeners for every view in your row. \r\nTo create a listener provider you need to follow this steps:\r\n\t\r\n\t1. Implementes the CellListenerProvider interface and mark your provider methods with the ListenerSource Annotation. The ListenerSource annotated methods must receive a CellElement as a parameter.\r\n\t\t\r\n\t\t\tpublic class SampleActivity extends Activity implements SampleView, CellListenerProvider {\r\n\t\t\r\n\t\t\t    @ListenerSource(\"CheckBox\")\r\n\t\t\t    public OnCheckedChangeListener provideCheckBoxListener(final CellElement cellElement) {\r\n\t\t\t        return new OnCheckedChangeListener() {\r\n\t\t\t            @Override\r\n\t\t\t            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\r\n\t\t\t                mPresenter.onCheckChange(cellElement, isChecked);\r\n\t\t\t            }\r\n\t\t\t        };\r\n\t\t\t    }\r\n\t\t\t\r\n\t\t\t    @ListenerSource(\"Title\")\r\n\t\t\t    public View.OnClickListener provideOnClickListener(final CellElement cellElement) {\r\n\t\t\t        return new View.OnClickListener() {\r\n\t\t\t            @Override\r\n\t\t\t            public void onClick(View v) {\r\n\t\t\t                mPresenter.onCheckChange(cellElement, true);\r\n\t\t\t            }\r\n\t\t\t        };\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t\t}\r\n\t\t\r\n\t2. Mark your target views with the annotation ListenerTarget. This views will receive the listener provided by yout CellListenerProvider.\r\n\t\t\r\n\t\t\tprivate static class ViewHolder implements CellViewHolder {\r\n\t\t\r\n\t\t        @ListenerTarget(\"Title\")\r\n\t\t        public TextView mTextViewTitle;\r\n\t\t        @ListenerTarget(\"CheckBox\")\r\n\t\t        public CheckBox mCheckBox;\r\n\t\t        ...\r\n\t\t        \r\n\t\t    }\r\n\r\n\r\n6. Construct or inject a PaperKnife instance and execute the data mapping in your adapter\r\n\r\n\t\tpublic CustomAdapter (Context context, List<? extends CellElement> list,\r\n                          CellDataProvider cellDataProvider, CellListenerProvider cellListenerProvider) {\r\n\t        ...\r\n\t        mPaperKnife = new PaperKnife(cellDataProvider, cellListenerProvider);\r\n    \t}\r\n    \t\r\n\t\t@Override\r\n\t    public View getView(int position, View convertView, ViewGroup parent) {\r\n        \t...\r\n\t\t\tmPaperKnife.bind(mList.get(position), viewHolder);\r\n        \treturn convertView;\r\n    \t}\r\n       \r\n##Download\r\nGRADLE\r\n\r\n    compile 'com.vsa:paperknife:1.1'\r\n\r\n##License\r\n\r\n\tCopyright 2013 Alberto Vecina\r\n\t\r\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\r\n\tyou may not use this file except in compliance with the License.\r\n\tYou may obtain a copy of the License at\r\n\t\r\n\t   http://www.apache.org/licenses/LICENSE-2.0\r\n\t\r\n\tUnless required by applicable law or agreed to in writing, software\r\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\r\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\tSee the License for the specific language governing permissions and\r\n\tlimitations under the License.\r\n        \r\n        \r\n\r\n\t\t\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}